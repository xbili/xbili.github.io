{"componentChunkName":"component---src-templates-post-js","path":"/the-effective-engineer","webpackCompilationHash":"8f91c9b3bfd2c5f97905","result":{"data":{"wordpressPost":{"id":"ec2dc9f0-568c-5e99-898b-91438af0bd7d","slug":"the-effective-engineer","title":"The Effective Engineer","content":"\n<p>I have a list of books for my 2019 resolution, and along with each book is a deadline to finish it by. I set a goal to finish <a href=\"https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107\">The Effective Engineer: How to Leverage Your Efforts in Software Engineering</a> by the end of February, and I finished it early!</p>\n\n\n\n<p><a href=\"https://wordpress.com/posts/xbili.wordpress.com\"></a></p>\n\n\n\n<p>The entire book revolves around one single idea: the effective engineer does work that optimizes <strong>leverage</strong>, which is defined as the impact produced over time spent on a task. i.e. the ROI for effort that&#8217;s put in a certain task. There are many takeaways from the book, but I think I&#8217;ll document two particular ones that I have already started practicing in my own time.</p>\n\n\n\n<h2>Invest in Iteration Speed &amp; Tooling</h2>\n\n\n\n<p>The author included this interesting quote on this matter.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If you have to do something manually more than twice, write a tool for the third time.</p></blockquote>\n\n\n\n<p>The common argument against this is best explained by this xkcd.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://imgs.xkcd.com/comics/automation.png\" alt=\"\" /><figcaption>xkcd on automation</figcaption></figure></div>\n\n\n\n<p>My take on this is probably not going to be the most popular, but I do agree with the author on this one. (Automation and tooling is necessary) It is in the blood of an engineer to invent an elegant solution given a particular problem at hand. Automation is no different than the &#8220;original task&#8221; to be done. &#8220;Rethinking&#8221; and &#8220;ongoing development&#8221; is probably indicative of the wrong solution implemented by the engineer, resulting in a downward spiral of productivity. I think the only way to get it right is through experience after several spirals, or to learn from the experience of those who have been through similar situations.</p>\n\n\n\n<p>Tooling is as important as the actual product itself, and we should take pride in understanding the tools we use. Personally, before I start any particular project, I&#8217;ll optimize my development environment for the fastest iteration possible and do the minimum amount of manual work to validate my implementation. That includes setting up shell scripts, hot reloading, and auto-run test cases. These are simple tricks that I&#8217;ve embraced more to boost my development productivity.</p>\n\n\n\n<h2>Prioritize Regularly</h2>\n\n\n\n<p>Prioritizing is easy, but doing is regularly is tough. It is deemed as a high leverage task, which means that it yields a high ROI.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://s3.amazonaws.com/prod_pm_files/06/3d/0f/10/9f/37/81/c7/Prioritization%20Matrix%20basic%20format.png\" alt=\"\" /><figcaption>Probably one of the mostly used matrices when it comes to the topic of prioritization.</figcaption></figure></div>\n\n\n\n<p>The reason for its high leverage is probably very straightforward, and from the matrix, we should always be focusing on tasks that are in the top right quadrant when the top left quadrant is empty. These are the tasks of highest leverage, and personally I have found <strong>writing documentation</strong> to be one that belongs in that quadrant.</p>\n\n\n\n<p>Writing good documentation reveals many insights on the rationale behind the decisions made during implementation. Memory fails humans almost always as compared to clear, concise technical documentation. For every task that I take on, I have a set of documentation template ready. It&#8217;s pretty straightforward:</p>\n\n\n\n<ol><li>What&#8217;s the goal of this system design?</li><li>What are the options for achieving this goal?</li><li>What are the pros and cons of each option?</li><li>Which option was chosen?</li><li>Why?</li><li>Concrete implementation details, APIs etc.</li></ol>\n\n\n\n<p>There&#8217;ll always be push back for #6, because implementation details change all the time, but the rest should be set in stone. I would argue that when the business requirements change, a new set of documentation is needed because the goal of the system would be different from what it was before. The old documentation should be stashed away, but not discarded for &#8220;legacy reasons&#8221;.</p>\n\n\n\n<p>This one is really tough to practice at work because of the very fact that high leverage tasks reside in the top right quadrant. There are almost always tasks that pops in the top left quadrant, leaving little time for important, non-urgent tasks. Which is why I spend time every morning re-prioritizing, trying to squeeze in little burst of time for the more important tasks. I have a neat little system in Todoist that assigns a priority number of each individual quadrant, and priority 2 tasks are what I am always optimizing for, a little counter-intuitive, but it works.</p>\n\n\n\n<hr class=\"wp-block-separator\" />\n\n\n\n<p>The book was an enlightening read because it helped me understand what it takes, beyond technical abilities, to be a great engineer. I&#8217;m lucky to have come across this book early in my career, and I&#8217;ll probably revisit this book again in the years to come.</p>\n","date":"2019-02-05T08:20:09.000Z"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"the-effective-engineer"}}}