{"componentChunkName":"component---src-templates-post-js","path":"/api-rate-limiting","webpackCompilationHash":"8f91c9b3bfd2c5f97905","result":{"data":{"wordpressPost":{"id":"ea8080df-68d2-5d0f-813e-fe50f9a1dc79","slug":"api-rate-limiting","title":"API Rate Limiting","content":"<p>Since WordPress&#8217;s new admin site is <strong>so awesome</strong> &lt;insert emoji with heart eyes&gt;, I think I should document my little learning notes here instead. Shall use a sub-domain for this WordPress in time to come!</p>\n<p>Letterbox&#8217;s traffic went a bit off today, causing our instance&#8217;s CPU usage to spike. Apparently people were spamming API calls to our server, resulting in some form of DoS attack, well but it didn&#8217;t exactly crash/overload it.</p>\n<p>Do things that don&#8217;t scale, right? It probably slipped our mind when designing the API, thinking that all users would be angels and not do weird stuff like that. Clearly we were wrong. Also this would be needed in time to come when the API calls start to exceed Facebook&#8217;s API rate limit.[1]</p>\n<p><strong>API Rate Limiting </strong>is basically restricting the number of times a particular end user is able to call the endpoint. There are a couple of ways to do this, and the way that we chose would be to utilize a <strong>Redis cache</strong>.</p>\n<p>The idea is to have a key-value pair (user ID as the key and times accessed as value) that will update everytime a call is made, and Redis is perfect for handling little tasks like that.</p>\n<p>There&#8217;re many considerations to take into account for such a simple implementation. A <a href=\"https://www.binpress.com/tutorial/introduction-to-rate-limiting-with-redis/155\" target=\"_blank\">cursory look online</a> points to having to deal with HTTP headers (agh damn networking), different time buckets and also pipelining. It is certainly good to dive more into the details in time to come, <strong>but then there&#8217;s finals.</strong></p>\n<p>So instead of reinventing the wheel, I opted to use <strong><a href=\"https://github.com/ded/express-limiter\" target=\"_blank\">express-limiter</a>. </strong>It&#8217;s already written and works right out of the npm box. [2] The task is done in around 10 lines of code.</p>\n<pre><span class=\"pl-k\">var</span> redisClient <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>redis<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">createClient</span>();\n<span class=\"pl-k\">var</span> limiter <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>express-limiter<span class=\"pl-pds\">'</span></span>)(app, redisClient);\n\n<span class=\"pl-en\">limiter</span>({\n path<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/matches<span class=\"pl-pds\">'</span></span>,\n method<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>all<span class=\"pl-pds\">'</span></span>,\n lookup<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>user.id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection.remoteAddress<span class=\"pl-pds\">'</span></span>],\n total<span class=\"pl-k\">:</span> <span class=\"pl-c1\">50</span>,\n expire<span class=\"pl-k\">:</span> <span class=\"pl-c1\">60000</span>\n});</pre>\n<p>These few lines of code simply set a 50 call limit to /match endpoint, and sends a 429 if there are anymore calls from the same user IP thereafter. It does not seem like much but I think as a frontend developer since forever, I&#8217;ve not been able to appreciate such backend concepts.</p>\n<p>A little something I learnt today, besides SQL, DRC/TRC and Relational Algebra. Yup CS2102 is coming up next.</p>\n<p>Oh and I realized at the end of writing this post why I wouldn&#8217;t document more craft related post here. <strong>Typing code into WordPress is still pretty painful. </strong></p>\n<p>Ciao~</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>[1] Well&#8230; a problem for next time.<br />\n[2] Loses a lot of flexibility though.</p>\n<p>&nbsp;</p>\n","date":"2015-11-26T15:38:46.000Z"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"api-rate-limiting"}}}